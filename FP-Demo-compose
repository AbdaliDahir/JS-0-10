/*
Reduce Example ::
*/
const array1 = [1, 2, 3, 4];
const reducer = (previousValue, currentValue) => previousValue + currentValue;

// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10

// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15

/*
 Functional Programing
*/

// compose
const compose = (f,g) => (...args) => f(g(...args));
// reduce
const purchaseItem = (...functionss) => functions.reduce(compose);

const user = {
  name: "abdo",
  pay: "earth",
  cart: [],
  purchases: []
}

purchaseItem(
  emptyUserCart,
  buyItem,
  applyTaxToItems,
  addItemToCart
)(user, {name: 'Tv', price: 120})

function addItemToCart(user, item) {
  const newCart = user.cart.concat(item);
  return Object.assign({}, user, {cart: newCart});
}

fucntion applyTaxToItems(user) {
  const {cart} = user;
  const taxToApply = 1.5;
  // create new array -- not modify previous.
  const newCart = cart.map( cartItem => {
    return {
      name: cartItem.name,
      price: cartItem.price*taxToApply
    }
  });
  return Object.assign({}, user, {cart: newCart});
}

function buyItem(user) { 
  const itemsInCart = user.cart;
  return Object.assign({}, user, { purchases: itemsInCart });
}
function emptyUserCart(user) { 
  return Object.assign({}, user, { cart: [] });
}
